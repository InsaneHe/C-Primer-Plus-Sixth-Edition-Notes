Chapter2 Introducing C

一、Operator
1.An example
Listing2.1 The "first.c" Program
#include <studio.h>
int main(void) 		/* a simple program 					*/
{
	int num; 		/* define a variable called num 		*/
	num = 1; 		/* assign a value to num 				*/

	printf("I am a simple "); /* use the printf() function 	*/
	printf("computer.\n");
	printf("My favorite number is %d because it is first.\n", num);

	return 0;
}

2.The parts of a C program
(1)#include: This is a preprocessor instruction.

	Here we use "#include <stdio.h>" means that we want to include the info found in another file: studio.h, which is a standard part of all C compiler packages for supporting keyboard input and displaying output.

(2)int main(void): main() is ALWAYS the FIRST function called.

	Here we use "int main(void)", the "int" means the main function returns an integer, the "void" means the function takes no arguments.

(3)/* and */: They enclose comments and help clarify the program, the compiler will ignore them.

(4)"{": It makes the start of the statements that make up the function; "}" marks the end of the function.

	* statements: The things in functions. There are 5 types: declaration, assignment, function, control and null. 

(5)"int num;": It is a declaration statement which announces that you are using the value 1 to the variable called num.

(6)"num = 1;": It is an assignment statement which announces that you are using a variable called num and that num will be an integer type.

(7)'printf();': This is a function call statement and leaves the cursor on the same line.

	Here the "\n" from "printf("computer.\n");" is the code telling the computer to start a new line which means move the cursor to the beginning of the next line.

	Here the "%d" from "printf("My favorite number is %d because it is first.\n", num);" instructs the computer where and in what form to print the value of num.

(8)'return 0;': This is a return statement. A C function can furnish/return a number to the agency that used it.

3.Program Details
(1)#include Directives and Header Files

	* ?What is preprocessing?
	C compilers perform some preparatory work on source code before compiling.
	
	* ?What is stdio.h?
	It stands for standard input/output header. (header == a collection of infomation used by the compiler to build the final executable program, and the collection goes at the top of a file.)
	
	!!IMPORTANT
	The actual code for a function is in a library file of precompiled code instead of a header file. That is to say, header files help guide the compiler in putting your program together correctly.

(2)ANSI/ISO C
It standardizes which header files a C compiler must make available.
For example, some programs need to include stdio.h, and some do not.

	* ?How to determine which header file should we use?
	The documentation for a particular C implementation should include a description of the functions in the C library, and this description identifies which header file we should use.

(3)Comments
What are in "/*" & "*/" or what are after "//" are called "comments" which is used to make it easier for user to understand your program.

二、Functions
(1)Braces, Bodies and Blocks
Braces delimits the function. The presence of braces is mandatory. (Only "{}" does)

(2)Declarations
For example, "int num;" is termed a declaration statement which basically declares 2 things: First thing is you have a variable called num; Second thing is the "int" proclaims num as an integer which is one of the data types. The compiler can use this information to arrange for suitable storage space in memory for the "num" variable.

	* "int" here is a C keyword identifying one of the basic C data types.
	
	* Keywords are the words used to express a language, and you cannot use them for other purposes.
	
	* Identifier is a name you select for a variable, a function, or some other entity. (Such as "num".)
	
	!!In C, all variables must be declared before they are used. --> Provide lists of all the variables you use in a program and you have to show which data type each variable is. Normally, variables should be declared at the beginning of a block with no other kind of statement allowed to be come before any of the declarations.

(3)Data Types
Declaring a variable to be an integer or a character type makes it possible for the computer to store, fetch, and interpret the data properly.

(4)Name Choice
Use meaningful names (or identifiers) for variables. (If the name does not suffice, use comments to explain what the variables represent.)
The characters at your disposal are lowercase letters, uppercase letters, digits, and the underscore("_"). (C names are case sensitive.)

!!The first character must be a letter or an underscore.

!!Operating systems and the C library often use identifiers with one or two initial underscore characters, such as _kcab, so it is better to avoid that usage yourself.

(5)4 Good Reasons to Declare Variables
	[1]Gathering all variables in one place can make it easier for readers to grasp what the program is about.
	
	[2]This action encourages you to plan before coding.
	
	[3]This action helps prevent a programming's more subtle and hard-to-find bugs: misspelled variable name.
	
	[4]Your C program will not compile if you do not declare your variables.

(6)Assignment
"num = 1;" is an assignment statement, the earlier "int num;" set aside space in computer memory for the variable num, and the assignment line stores a value in that location.

(7)The printf() function
	[1]the argument/the actual argument of a function: the material enclosed in the parentheses, it is also information passed from the main() function to the printf() function.
	
	[2]formal argument: a variable in the in the function used to hold the value.
	
	* Escape Sequence is used to represent difficult-or impossible-to-type characters.
	
	For example, \t means Tab; \b means Backspace.
	
	* Placeholder is used to show where the value of a certain variable is to be printed.
	% alerts the program that a variable is to be printed at that location.

(8)Return Statement
You can regard it as something required for logical consistency.

三、Tips on Making Your Programs Readable
1.Choose meaningful variable names.

2.Use comments.

3.Use blank lines to sepatate one conceputal section of a function from another.

4.Use one line per statement.

For example, we can firstly begin with a comment to identify the filename and the purpose of the program. Next, we can declare the multiple variables either by separating the variables (multiple declaration statements) or by a comma in the declaration statement.

四、Another Example
1.Listing2.3 The "two_func.c" Program
#include <studio.h>

void butler(void); 	/* ANSI/ISO C function prototyping */

int main(void)
{
	printf("I will summon the butler function.\n");
	butler();
	printf("Yes. Bring me some tea and writeable DVDs.\n");

	return0;
}

void butler(void) 	/* start of function definition */
{
	printf("You rang, sir?\n");
}

The 1st appearance of the butler() function is in the prototype which informs the compiler about the fucntions to be used.

* Prototype declares to the compiler that you are using a particular function.

The 2nd appearance of it is in main() function in the form of a function call.
The final appearance of it presents the function definition which is the source code for the function itself.

* It is the location of the butler() call in main() instead of the location of the butler() definition in the file that determines when the butler() function is executed.

!!All C programs begin execution with main(), no matter where main() is located in the program files.

五、Debugging
1.Bugs == Program Errors; Debugging == Finding and Fixing the Errors.
(1)Syntax Errors
[1]Syntax errors use valid C symbols in the wrong places.

?How to detect syntax errors?
Firstly, look through the source code and see whether you spot anything obvious; Secondly, examine errors found by the compiler.

(2)Semantic Errors
[1]Semantic errors are errors in meaning.

?How to detect syntax errors?
1.Compare what a program does to what you expected it to do and go through a program step-by-step.
2.Sprinkle extra "print()" statements throughtout to monitor the values of selected variables at key points in the program.
3.Use a debugger. (A debugger is a program that enables you to run another program step-by-step and examine the value of that program's variables.)

六、Program State
1.The set of values of all the variables at a given point in program execution. (Like a snapshot of the current state of computation.)

七、Keywords and Reserved Identifiers (保留标识符)
1.Keywords == the vocabulary of C, they are special to C, you cannot use them as identifiers.
For example, "if", "int" and so on.

2.Reversed Identifiers == those beginning with an underscore character and the names of the standard library functions, such as "printf()". They do not cause syntax errors as they are valid names, but the language already uses them or reverses the right to use them, so it could cause problems if you use these identifiers to mean something else.

