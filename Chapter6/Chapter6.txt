Chapter 6 C Control Statements: Looping
一、Revisiting the while Loop
1.Program Comments
(1)== operator == equality operator.

(2)It is not the same as "=", which assigns value to variable.

(3)Pseudocode == express a program in simple English that parallels the forms of a computer language.

二、The while Statement
1.Terminating a while Loop
(1)General form of the while loop:
--------------------------------------------------------------------------------------------------------------------
while (expression)
	statement
--------------------------------------------------------------------------------------------------------------------

Here, statement means a simple statement with a terminating semicolon or a compound statement enclosed in braces; and the expression here means a comparison of values or any other expression, if it is true, the statement is executed once and then the expression is tested again.

(2)Each cycle == iteration.

(3)!When you construct a while loop. it must include something such as break or an if statement that changes the value of the test expression so that the expression eventually becomes false or the loop will never terminate!

2.while: An Entry-Condition Loop
(1)Conditional == the execution of the statement portion depends on the condition described by the test expression such as (index < 5).

(2)Entry condition == the condition must be met before the body of the loop is entered.

3.Syntax Points
(1)When using while loop, only the single statement, simple or compound, following the test condition is part of the loop.

(2)Infinite loop == a loop that does not quit without outside intervention.

(3)Null statement == a statement that does nothing. In C, the lone semicolon represents the null statement.

For example, if you want to skip over input to the 1st character that is not whitespace or a digit, we can use a loop like this:
--------------------------------------------------------------------------------------------------------------------
while (scanf("%d", &num) == 1)
	;  /* skip integer input */
--------------------------------------------------------------------------------------------------------------------

三、Which Is Bigger: Using Relational Operators and Expressions
1.Relational expression == the expression that make comparisons.

2.Relational operator == the operator that appear in them.
(1)The relational expressions can be used with characters, but they cannot be used to compare strings.

For example:
--------------------------------------------------------------------------------------------------------------------
while (ch != '$')
{
	count++;
	scanf("%c", &ch);
}
--------------------------------------------------------------------------------------------------------------------

(2)They can be used with floating-point numbers, but you should limit yourself to using only < and > in floating-point comparisons because round-off errors can prevent 2 numbers from being equal even though they should be logically.

2.Relational operator == the operator that appear in them.

3.What Is Truth?
(1)Recall that an expression in C always has a value. Take a look at the t_and_f.c program which prints the values of 2 relational expressions: one true and one false.

(2)According to the value printed by this program: in C, a true expression has the value 1, and a false expression has the value 0.

4.What Else Is True?
?If we use a 1 or a 0 as a while statement test expression, can you use other numbers?
(1)Take a look at the truth.c program: all nonzero values are regarded as true, and only 0 is recognized as false.

5.Troubles with Truth
(1)Take a look at the trouble.c program in which make a change in the while test condition, replacing "status == 1" with "status = 1". The second statement is an assignment statement. So the while loop is the same as using while (1); which means it never quits. When you enter q, and status is set to 0, but the loop test resets status to 1 and starts another cycle.

(2)?Why does this happen?
The program keeps looping because the user does not get a chance to type in any more input after entering q. When scanf() fails to read the specified form of input, it leaves the nonconforming input in place to be read the next time, and that "nonconforming input" here is "q". So when scanf() tries to read the q as an integer and fails, it leaves the q there. During the next loop cycle, scanf() attempts to read where it left off the last time: at the q. Once again, scanf() fails to read the q as an integer, so not only does this example set up an infinite loop, it also creates a loop of infinite failure.

(3)Sometimes we might use = for ==
One way you can use to solve this problem is: if there exists a constant and it needs to be compared to other values, you can put it on the left side of the comparison to help catch errors. Because it is illegal to assign to a constant, so the compiler will tag the use of the assignment operator as a syntax error.

6.The New _Bool Type
(1)Boolean variables == variables representing true or false.

(2)_Bool type == the C type name for a Boolean variable.

(3)A _Bool variable can only have a value of 1 (true) or 0 (false). If you try to assign a nonzero numeric value to a _Bool variable, the variable is set to 1.

(4)stdbool.h header file == makes bool an alias for _Bool and defines true and false as symbolic constants for the values 1 and 0.

7.Precedence of Relational Operators
(1)The relational operators are themselves organized into 2 different precedences:
[1]Higher precedence group: <, <=, >, >=.

[2]Lower precedence group: ==, !=.

8.Indefinite Loops and Counting Loops
(1)Indefinite loop == we do not know in advance how many times the loop will be executed before the expression becomes false.

(2)Counting loop == they execute a predetermined number of repetitions.

(3)3 actions involved in setting up a loop that is to be repeated a fixed number of times:
[1]A counter must be initialized.

[2]The counter is compared with some limiting value. (The while loop condition)

[3]The counter is incremented each time the loop is traversed. (The increment operator)

四、The for Loop
1.The for loop gathers all 3 actions: initializing, testing and updating into one place.
(1)Take a look at the sweetie2.c program:
The parentheses following the keyword for contain 3 expressions separated by 2 semicolons. The 1st expression is the initialization which is done just once, when the for loop first starts. The 2nd expression is the test condition which is evaluated before each potential execution of a loop. The 3rd expression is the change or update which is evaluated at the end of each loop.

* Any side effect in a control expression, such as incrementing a variable, take place before the program evaluates another expression.

(2)The 1st line of the for loop tells us immediately all the information about the loop parameters: the starting value of num, the final value of num, and the amount that num increases on each looping.

2.Using for for Flexibility
(1)The for loop in C has many more possibilities: (P210)
[1]You can use the decrement operator to count down instead of up.

[2]You can count by twos, tens and so on.

[3]You can count by characters instead of by numbers.

[4]You can test some condition other than the number of iterations.

[5]You can let a quantity increase geometrically instead of arithmetically.

[6]You can use any legal expression you want for the 3rd expression.

[7]You can even leave one or more expressions blank (but do not omit the semicolons).

[8]The 1st expression need not initialize a variable. It could, instead, be a printf() statement of some sort. (The 1st expression is evaluated or executed only once, before any other parts of the loop are executed.)

[9]The parameters of the loop expressions can be altered by actions within the loop.

3.The form of the for statement
-------------------------------------------------------------------------------------------------------------------
for (initialize; test; update)
	statement
-------------------------------------------------------------------------------------------------------------------

The loop is repeated until test becomes false or zero.

五、More Assignment Operators: +=, -=, *=, /=, %=
1.Assignment operators of C is "=" and other assignment operators that update variables. Each is used with a variable name to its left and an expression to its right. The variable is assigned a new value equal to its old value adjusted by the value of the expression at the right.

六、The Comma Operator
1.The comma operator == extends the flexibility of the for loop by enabling you to include more than 1 initialization or update expression in a single for loop specification.

2.Take a look at the postage.c program, it uses the comma operator in the initialize and the update expressions, its presence in the 1st expression causes ounces and cost to be initialized. Its 2nd occurance causes ounces to be increased by 1 and cost to be increased by 20 (that is the value of NEXT_OZ) for each iteration.

3.The comma operator has 2 further properties.
(1)It guarantees that the expressions it separates are evaluated in a left-to-right order which means the comma is a sequence point, all side effects to the left of the comma take place before the program moves to the right of the comma.

[2]The value of the whole comma expression is the value of the right-hand member.

* Suppose you get careless and use comma notation in writing a number:
-------------------------------------------------------------------------------------------------------------------
houseprice = 249,500;
-------------------------------------------------------------------------------------------------------------------

This is not a syntax error, C interprets this as a comma expression, with houseprice = 249 being the left subexpression and 500 the right one. It means assign 249 to houseprice variable and the "500" part does nothing.

-------------------------------------------------------------------------------------------------------------------
houseprice = (249,500);
-------------------------------------------------------------------------------------------------------------------

This assigns 500, the value of the right subexpression, to houseprice.

4.Zeno Meets the for Loop
(1)Take a look at the zeno.c program:
It shows that you can use more than 1 comma operator in an expression.

七、An Exit-Condition Loop: do while
1.Exit-condition loop == the condition is checked after each iteration of the loop, guaranteeing that statements are executed at least once. This variety is called do while loop.

2.Take a look at the do_while.c program and the entry.c program:
[1]We can conclude that the general form of the do while loop is:
-------------------------------------------------------------------------------------------------------------------
do
	statement
while (expression);
-------------------------------------------------------------------------------------------------------------------

!We should restrict the use of do while loops to cases that require at least one iteration!

3.Avoid a do while structure of the type shown in the following psedocode:
-------------------------------------------------------------------------------------------------------------------
do
{
	ask user if he or she wants to continue some clever stuff
} while (answer is yes);
-------------------------------------------------------------------------------------------------------------------

Here, after the user answers "no", some clever stuff gets done anyway because the test comes too late.

八、Which Loop?
1.When you decide you need a loop, which one should you use?
[1]First, decide whether you need an entry-condition loop or an exit-condition loop.
Usually, your choice will be an entry-condition loop because it is better to look before you leap (or loop) than after, and a program is easier to read if the loop test is found at the beginning of the loop.

2.To make a while like a for, preface it with an initialization and include update statements.

For example:
-------------------------------------------------------------------------------------------------------------------
initialize;
while (test)
{
	body;
	update;
}
-------------------------------------------------------------------------------------------------------------------

is the same as:
-------------------------------------------------------------------------------------------------------------------
for (initialize; test; update)
	body;
-------------------------------------------------------------------------------------------------------------------

九、Nested Loops
1.Nested loop == one loop inside another loop.

2.Common use: display data in rows and columns. One loop can handle all the columns in a row, and the second one handles the rows.

Take the rows1.c program as an example:

3.Program Discussion
(1)Outer loop == the for loop beginning on line 10.

(2)Inner loop == the loop beginning on line 12 which is inside the other loop.

(3)With a nested loop, the inner loop runs through its full range of iterations for each single iteration of the outer loop.

十、Introducing Arrays
1.Array == a series of values of the same type stored sequentially.

2.Element == the individual item accessed by using an integer index.

3.The numbering of array elements starts with 0 instead of 1.

!One potential pitfall is that, in the interest of speed of execution, C does not check to see whether you use a correct subscript. The compiler does not look for such errors. When the program runs, these statements would place data in locations possibly used for other data!

4.Char array == an array whose elements are assigned char values.
(1)The contents of a char array form a string if the array contains the null character, \0, which marks the end of the string.

For example:
character array but not a string:
|y|o|u| |c|a|n| |s|e|e| |i|t|.|

character array and a string:
|y|o|u| |c|a|n| |s|e|e| |i|t|.|\0|

5.Subscript / index / offset == the numbers used to identify the array elements.
(1)They must be integers and the subscripting begins with 0. The array elements are stored next to each other in memory.

6.Using a for Loop with an Array
Take the scores_in.c program as an example:

(1)A good practice is to have a program repeat or "echo" the values it has just read in which helps ensure the program is processing the data you think it is.

(2)The principle of modularity == a program should be broken into separate units, with each unit having one task to perform which makes a program easier to read and makes it much easier to update or modify a program if different parts of the program are not intermingled.

十一、A Loop Example Using a Function Return Value
1.To write a function with a return value, do the following:
(1)When you define a function, state the type of value it returns.

(2)Use the keyword return to indicate the value to be returned.

2.To declare the function type, preface the function name with the type.

3.The function can return the value of a variable, but it can return the value of expressions, too.

4.Program Discussion
(1)Take a look at the power.c program:
[1]Driver == a short program designed to test a function.

For example, the main() program of the power.c program.

(2)The compiler needs to know what kind of value power() returns so that it will know how many bytes of data to expect and how to interpret them. This is why you have to declare the function.

(3)power() is not followed by a semicolon when it appears in a function definition, but is followed by a semicolon when in a function declaration.

5.Using Functions with Return Values
(1)Declaring the function, calling the function, defining the function, using the return keyword: these are the basic elements in defining and using a function with a return value.

(2)Two questions
[1]If you are supposed to declare functions before you use their return values, how come you used the return value of scanf() without declaring scanf()?
The stdio.h header file has function declarations for scanf(), printf() and several other I/O functions.

[2]Why do you have to declare power() separately when your definition of it says it is type double?
The compiler needs to know what type power() is when it first encounters power() in the program. At this point, the compiler has not yet encountered the definition of power(), so it does not know that the definition says the return type is double. You use a forward declaration to help out the compiler. But if you place the power() function definition ahead of main() in the file, you can omit the forward declaration because the compiler will know all about power() before reaching main(), it is not standard C style though.

* Forward declaration == informs the compiler that the function is defined elsewhere and the type it will return.
