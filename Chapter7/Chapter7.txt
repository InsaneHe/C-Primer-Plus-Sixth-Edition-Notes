Chapter 7 C Control Statements: Branching and Jumps
一、The if Statement
1.Jump statement == shift the program flow to another part of a program.

2.Take a look at the colddays.c program:
(1)What happens if temperature is not less than zero?
The cold_days++; statement is skipped and the while loop moves on to read the next temperature value.

3.If statement == a branching statement or selection statement.
(1)The general form:
--------------------------------------------------------------------------------------------------------------------
if (expression)
	statement
--------------------------------------------------------------------------------------------------------------------

Normally, expression is a relational expression, which compares the magnitude of 2 quantities; the statement portion can be a simple statement as in the example, or it can be a compound statement or block, marked off by braces.

4.Branching statement == provides a junction where the program has to select which of 2 paths to follow.

二、Adding else to the if statement
1.if else form == choose between 2 statements.
(1)The general form:
--------------------------------------------------------------------------------------------------------------------
if (expression)
	statement1
else
	statement2
--------------------------------------------------------------------------------------------------------------------

If you want more than one statement between the if and the else, you must use braces to create a single block.

For example:
--------------------------------------------------------------------------------------------------------------------
if (x > 0)
	printf("Incrementing x:\n");
	x++;
else  // will generate an error
	printf("x <= 0 \n");
--------------------------------------------------------------------------------------------------------------------

The compiler sees the printf() statement as part of the if statement, and it sees the x++; statement as a separate statement, not as part of the if statement. It then sees the else as being unattached to an if, which is an error.

2.Another Example: Introducing getchar() and putchar()
(1)getchar() and putchar() are functions specifically designed for character-oriented I/O.

(2)getchar() == takes no arguments and returns the next character from input.

(3)putchar() == prints its argument.

(4)These functions deal only with characters, they are faster and more compact than the more general scanf() and printf() functions and they do not need format specifiers.

3.The ctype.h Family of Character Functions
(1)ctype.h header file == contains the prototype of a standard set of functions for analyzing characters.

(2)See the table 7.1 and the table 7.2 from p253 to p254

4.Multiple Choice else if
(1)The entire if else structure counts as a single statement, so we do not have to enclose the nested if else staements in braces.

5.Pairing else with if
(1)For example:
--------------------------------------------------------------------------------------------------------------------
if (number > 6)
	if (number < 12)
		printf("You're close!\n");
else
	printf("Sorry, you lose a turn!\n");
--------------------------------------------------------------------------------------------------------------------

?Does the else go with the 1st if or the 2nd?
The answer is, the else goes with the 2nd if.

(2)else goes with the most recent if unless braces enclose inner if statements.

For example:
-------------------------------------------------------------------------------------------------------------------
if (condition)
	do this;

if (condition)
	do this;

else
	do this;
-------------------------------------------------------------------------------------------------------------------

Here, the else goes with the 2nd if. (The compiler ignores indentation.)

-------------------------------------------------------------------------------------------------------------------
if (condition)
{
	do this;
	if (condition)
		do this;
}
else
	do this;
-------------------------------------------------------------------------------------------------------------------

Here, else goes with the 1st if as braces enclose inner if statements.

6.More Nested ifs
(1)Integer multiplication is faster than extracting a square root.

(2)Flag == a boolean variable whose value is used to represent if a condition is true.

For example, if we want to know if the program flow gets inside the if statement, we can set a variable to some value, say 1, outside the loop and reset the variable to 0 inside the if statement. Then, after the loop is completed, you can check to see whether the variable is still 1. If it is, the if statement was never entered.

[1]Traditionally, C has used the int type for flags, but the new _Bool type matches the requirements perfectly.

三、Let's Get Logical
1.Principles
(1)The logical operators have a lower precedence than the relational operators.

(2)Suppose exp1 and exp2 are 2 simple relational expressions.
[1]exp1 && exp2 is true only if both exp1 and exp2 are true.

[2]exp1 || exp2 is true if either exp1 or exp2 is true or if both are true.

[3]!exp1 is true if exp1 is false, and it's false if exp1 is true.

2.Alternate Spellings: The iso646.h Header File
(1)iso646.h header file == defines the alternative spellings for the logical operators added by C99 standard.

3.Precedence
(1)The ! operator has a very high precedence -- higher than multiplication, the same as the increment operators, and just below that of parentheses.

(2)The && operator has higher precedence than ||, and both rank below the relational operators and above assignment in precedence.

4.Order of Evaluation
(1)C ordinarily does not guarantee which parts of a complex expression are evaluated first.

For example:
-------------------------------------------------------------------------------------------------------------------
apples = (5 + 3) * (9 + 6);
-------------------------------------------------------------------------------------------------------------------

Here, the expression 5 + 3 might be evaluated before 9 + 6, or it might be evaluated afterward.

(2)One exception to this rule (or lack of rule) is the treatment of logical operators. C guarantees that logical expressions are evaluated from left to right. && and || operators are sequence points, so all side effects take place before a program moves from one operand to the next.

(3)It guarantees that as soon as an element is found that invalidates the expression as a whole, the evaluation stops.

5.Ranges
For example, you can use the && operator to test for ranges:
-------------------------------------------------------------------------------------------------------------------
if (range >= 90 && range <= 100)
	printf("Good show!\n");
-------------------------------------------------------------------------------------------------------------------

But remember to avoid:
-------------------------------------------------------------------------------------------------------------------
if (90 <= range <= 100)  // No! Don't do it!
	printf("Good show!\n");
-------------------------------------------------------------------------------------------------------------------

Here, the problem is that the code is a semantic error instead of a syntax one, so the compiler will NOT catch it. It interprets the condition as: (90 <= range) <= 100. The subexpression 90 <= range either has the value 1 (for true) or 0 (for false). Either value is less than 100, so the whole expression is always true, regardless of the value of range.

四、A Word-Count Program
1.Word-count program == a program that reads input and reports the number of words it finds.

2.Partial line == a line with characters but no newline.

3.Word == a sequence of characters that contains no whitespace (that is, no spaces, tabs, or newlines).

For example: glymxck and r2d2 are words.

4.ctype.h function isspace() == returns true if its argument is a whitespace character.

5.If you do use a Boolean variable, the usual idiom is to use the value of the variable itself as a test condition.

For example:
-------------------------------------------------------------------------------------------------------------------
if (inword)
-------------------------------------------------------------------------------------------------------------------

instead of:
-------------------------------------------------------------------------------------------------------------------
if (inword == true)
-------------------------------------------------------------------------------------------------------------------

五、The Conditional Operator: ?:
1.Conditional expression == a way to express one form of the if else statement and uses the ?: conditional operator which has 3 operands.

For example:
-------------------------------------------------------------------------------------------------------------------
x = (y < 0) ? -y : y;
-------------------------------------------------------------------------------------------------------------------

Everything between the = and the semicolon is the conditional expression. Here the statement means "If y is less than 0, x = -y; otherwise, x = y."

(1)The general form of the conditional expression:
-------------------------------------------------------------------------------------------------------------------
expression1 ? expression2 : expression3
-------------------------------------------------------------------------------------------------------------------

If expression1 is true (nonzero), the WHOLE conditional expression has the same value as expression2. If expression1 is false (zero), the WHOLE conditional expression has the same value as expression3.

2.unary operator == operator with 1 operand.

3.binary operator == operator with 2 operands.

4.ternary operator == operator with 3 operands.

六、Loop Aids: continue and break
1.Continue and break statements == enable you to skip part of a loop or even terminate it, depending on tests made in the body of the loop.

2.The continue Statement
(1)Continue == when encountered, it causes the rest of an iteration to be skipped and the next iteration to be started. If the continue statement is inside nested structures, it affects only the innermost structure containing it.

(2)The ways of avoiding using continue
Take a look at the skippart.c program.
[1]Omitting the continue and making the remaining part of the loop an else block.
-------------------------------------------------------------------------------------------------------------------
if (score < 0 || score > 100)
	/* printf() statement */
else
{
	/* statements */
}
-------------------------------------------------------------------------------------------------------------------

[2]Use operators.

For example:
-------------------------------------------------------------------------------------------------------------------
if (score >= 0 && score <= 100)
-------------------------------------------------------------------------------------------------------------------

[3]Advantages of using continue that way
{1}We can eliminate one level of indentation in the main group of statements, which enhances readability when the statements are long or are deeply nested already.

{2}Another advantage for continue is as a placeholder.

3.The break Statement
(1)A break statement in a loop == causes the program to break free of the loop that encloses it and to proceed to the next stage of the program.

(2)Sometimes break is used to leave a loop when there are 2 separate reasons to leave.

(3)The break statement is an essential adjunct to the switch statement.

(4)A break statement takes execution directly to the 1st statement.

七、Multiple Choice: switch and break
1.Using the switch Statement
(1)Switch statement == used when a program needs to choose one of several alternatives.

(2)Take a look at the animals.c program
[1]The expression in the parentheses following the word switch is evaluated. Then the program will scan the list of labels (here, case 'a':, case 'b':, and so on) until it finds one matching that value.

[2]If there is no match?
{1}If there is a line labeled default:, the program jumps to that line.

{2}Otherwise, the program proceeds to the statement following the switch.

[3]Here, the break in the switch is used to cause the program to break out of the switch and skip to the next statement after the switch. Without the break statement, every statement from the matched label to the end of the switch would be processed.

(3)A break statement works with loops and with switch, but continue works just with loops. However, continue can be used as part of a switch statement if the statement is in a loop, and as other loops, continue causes the program to skip over the rest of the loop, including other parts of the switch.

(4)The switch test expression in the parentheses should be one with an integer value (including type char). The case labels must be integer-type (including char) constants or integer constant expressions (expressions containing only integer constants).

(5)We cannot use a variable for a case label.

(6)Structure of a switch:
-------------------------------------------------------------------------------------------------------------------
switch (integer expression)
{
	case constant1:
		statements;  // optional
	case constant2:
		statements;  // optional
	default:
		statements;  // optional
}
-------------------------------------------------------------------------------------------------------------------

2.Reading Only the First Character of a Line
(1)Take a look at the animals.c program
[1]When dab was entered, only the 1st character was processed, which is often desirable in interactive programs looking for single-character responses.

The following code produced this behavior:
-------------------------------------------------------------------------------------------------------------------
while (getchar() != '\n')
	continue;  /* skip rest of input line */
-------------------------------------------------------------------------------------------------------------------

This loop reads characters from input up to and including the newline character generated by the Enter key.

3.Multiple Labels
(1)Take a look at the vowels.c program
The break statement for case 'U' is not needed, because in its absence, program flow goes to the next statement in the switch, which is the break for the default case.
